/*{
    "author": "OmniAutomation Assistant",
    "targets": ["omnifocus"],
    "type": "action",
    "identifier": "com.omnifocus.assistant.dailyOverview",
    "version": "1.0",
    "description": "This script provides an overview of the completed tasks for the current day or week.",
    "label": "Productivity Report",
    "mediumLabel": "Productivity Report",
    "paletteLabel": "Productivity Report",
    "image": "arrow.up.doc"
}*/

(() => {
  const webhookService = "com.omnifocus.assistant.webhook";
  const credentials = new Credentials();

  async function retrieveOrRequestWebhookUrl() {
    var credential = await credentials.read(webhookService);
    if (!credential) {
      var inputForm = new Form();
      var webhookField = new Form.Field.String("webhookUrl", "Webhook URL", "");
      inputForm.addField(webhookField);
      var formPrompt = "Enter Webhook URL where results should be sent:";
      var formObject = await inputForm.show(formPrompt, "Continue");
      var webhookUrl = formObject.values["webhookUrl"];
      await credentials.write(webhookService, "user", webhookUrl);
      return webhookUrl;
    } else {
      return credential.password;
    }
  }

  var action = new PlugIn.Action(function (selection, sender) {
    // Function to format the date to YYYY-MM-DD
    function formatDate(date) {
      var d = new Date(date),
        month = d.toLocaleString('default', { month: 'long' }),
        day = d.getDate(),
        suffix = getDaySuffix(day),
        year = d.getFullYear();
      return `${month} ${day}${suffix}`;
    }

    function getDaySuffix(day) {
      if (day >= 11 && day <= 13) {
        return 'th';
      }
      switch (day % 10) {
        case 1:
          return 'st';
        case 2:
          return 'nd';
        case 3:
          return 'rd';
        default:
          return 'th';
      }
    }

    // Function to get the start date of the current week (Monday)
    function getWeekStartDate(date) {
      var d = new Date(date);
      var day = d.getDay(),
        diff = d.getDate() - day + (day == 0 ? -6 : 1); // Adjust if day is Sunday
      return new Date(d.setDate(diff));
    }

    // Create a new Form
    let form = new Form();
    let summaryTypeField = new Form.Field.Option(
      "summaryType",
      "Summary Type",
      ["Daily", "Weekly"],
      null,
      "Daily"
    );
    form.addField(summaryTypeField);

    form.show("Choose Summary Type", "Continue").then(form => {
      let summaryType = form.values["summaryType"];

      let today = new Date();
      let startDate, endDate, dateLabel;

      if (summaryType === "Daily") {
        startDate = endDate = formatDate(today);
        dateLabel = `${startDate}`;
      } else if (summaryType === "Weekly") {
        startDate = formatDate(getWeekStartDate(today));
        endDate = formatDate(today);
        dateLabel = `${startDate} to ${endDate}`;
      } else {
        return; // No valid selection made
      }

      // Filter tasks based on the date range
      let completedTasks = flattenedTasks.filter(task => {
        return task.completed && formatDate(task.completionDate) >= startDate && formatDate(task.completionDate) <= endDate;
      });

      // Count tasks with no project (Inbox tasks)
      let inboxTasksCount = completedTasks.filter(task => !task.containingProject).length;

      // Count tasks with a project
      let projectTasksCount = completedTasks.length - inboxTasksCount;

      // Determine progressed projects and mark completed ones
      let progressedProjects = new Set();
      completedTasks.forEach(task => {
        let projectName = task.containingProject?.name;
        if (projectName) {
          let projectStatus = task.containingProject.completed ? " (COMPLETED)" : "";
          progressedProjects.add(projectName + projectStatus);
        }
      });

      // Tasks with due dates completed during the selected period
      let dueTasksCount = completedTasks.filter(task => task.dueDate).length;

      // Tasks with due dates that weren't finished during the selected period
      let unfinishedDueTasks = flattenedTasks.filter(task => {
        let taskDueDate = formatDate(task.dueDate);
        return !task.completed && task.dueDate && taskDueDate <= endDate;
      });

      // Data to be sent
      let data = {
        date: dateLabel,
        totalCompletedTasks: completedTasks.length,
        inboxTasks: inboxTasksCount,
        projectTasks: projectTasksCount,
        progressedProjects: [...progressedProjects],
        completedTasksWithDueDates: dueTasksCount,
        unfinishedTasksWithTodaysDueDate: unfinishedDueTasks.length
      };

      // Creating a Fetch Request
      retrieveOrRequestWebhookUrl().then(webhookUrl => {
        let request = URL.FetchRequest.fromString(webhookUrl);
        request.method = 'POST';
        request.bodyString = JSON.stringify(data);
        request.headers = { 'Content-Type': 'application/json' };

        console.log(`Sending request to ${webhookUrl} with data: ${request.bodyString}...`)

        // Submit the request
        // Because it's a webhook, we'll know pretty immediately if it doesn't work.
        request.fetch();
      }).catch(error => {
        console.error("Error handling webhook URL:", error);
      });
    });
  });

  return action;
})();

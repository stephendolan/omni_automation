/*{
    "author": "Stephen Dolan",
    "targets": ["omnifocus"],
    "type": "action",
    "identifier": "com.stephendolan.export-database-to-csv",
    "version": "0.1",
    "description": "A plug-in that exports all tasks and projects to a CSV file and copies it to the clipboard.",
    "label": "Export Database to CSV",
    "mediumLabel": "Export to CSV",
    "longLabel": "Export Database to CSV",
    "paletteLabel": "Export to CSV"
}*/

/// <reference path="./types/omnifocus.d.ts" />
/// <reference path="./types/database-export.d.ts" />

(() => {
    var action = new PlugIn.Action(function (selection, sender) {
        // Helper functions
        /**
         * Formats a date to a locale string or returns empty string if null
         * @param {Date | null} date - The date to format
         * @returns {string} The formatted date string
         */
        function formatDate(date) {
            return date ? date.toLocaleString() : "";
        }

        /**
         * Escapes a string for CSV format by wrapping in quotes and escaping existing quotes
         * @param {string} str - The string to escape
         * @returns {string} The CSV-escaped string
         */
        function csvEscape(str) {
            return `"${str.replace(/"/g, '""')}"`;
        }

        /**
         * Converts a Project.Status to a human-readable string
         * @param {Project.Status} status - The project status to convert
         * @returns {string} The human-readable status string
         */
        function projectStatusToString(status) {
            if (status === Project.Status.Active) {
                return "Active";
            } else if (status === Project.Status.OnHold) {
                return "On Hold";
            } else if (status === Project.Status.Done) {
                return "Completed";
            } else if (status === Project.Status.Dropped) {
                return "Dropped";
            } else {
                return "Unknown";
            }
        }

        /**
         * Determines the status of a task based on its completion, drop, and defer dates
         * @param {Task} task - The task to check
         * @returns {string} The task's status as "Completed", "Dropped", "Deferred", or "Active"
         */
        function taskStatus(task) {
            if (task.effectiveCompletionDate) {
                return "Completed";
            } else if (task.effectiveDropDate) {
                return "Dropped";
            } else if (task.effectiveDeferDate) {
                return "Deferred";
            } else {
                return "Active";
            }
        }

        // Initialize CSV content
        var csvContent = "Type,Status,Title,Container,Defer Date,Due Date,Created\n";

        // Export Projects
        flattenedProjects.forEach(project => {
            var created = csvEscape(formatDate(project.creationDate));
            var deferDate = csvEscape(formatDate(project.deferDate));
            var dueDate = csvEscape(formatDate(project.dueDate));
            var folderName = project.parentFolder ? project.parentFolder.name : "";
            var status = projectStatusToString(project.status);

            // Only export incomplete items.
            if (status !== "Completed" && status !== "Dropped") {
                csvContent += `Project,${status},${csvEscape(project.name)},${folderName},${deferDate},${dueDate},${created}\n`;
            }
        });

        // Export Tasks
        flattenedTasks.forEach(task => {
            var created = csvEscape(formatDate(task.added));
            var deferDate = csvEscape(formatDate(task.effectiveDeferDate));
            var dueDate = csvEscape(formatDate(task.effectiveDueDate));
            var projectName = task.project ? task.project.name : "";
            var status = taskStatus(task);

            // Only export incomplete items.
            if (status !== "Completed" && status !== "Dropped") {
                csvContent += `Task,${status},${csvEscape(task.name)},${csvEscape(projectName)},${deferDate},${dueDate},${created}\n`;
            }
        });

        // Copy CSV content to clipboard
        Pasteboard.general.string = csvContent;
        new Alert("Export Complete", "CSV content copied to clipboard.").show();
    });

    /**
     * Validates whether the action can be performed
     * @param {Selection} selection - The current selection in OmniFocus
     * @param {any} sender - The sender of the validation request
     * @returns {boolean} True if the action can be performed
     */
    action.validate = function (selection, sender) {
        return true;
    };

    return action;
})();

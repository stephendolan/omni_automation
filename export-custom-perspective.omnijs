/*{
	"type": "action",
	"targets": ["omnifocus"],
	"author": "Otto Automator",
	"identifier": "com.omni-automation.of.export-custom-perspective",
	"version": "1.3",
	"description": "Exports the chosen custom perspective to file.",
	"label": "Export Custom Perspective",
	"shortLabel": "Export Perspective",
	"paletteLabel": "Export Perspective",
  "image": "square.and.arrow.up"
}*/

/// <reference path="./types/omnifocus.d.ts" />
/// <reference path="./types/perspective-exporter.d.ts" />

(() => {
  const action = new PlugIn.Action(async function (_selection, _sender) {
    try {
      /** @type {Perspective.Custom[]} */
      let perspectives = new Array();
      perspectives = perspectives.concat(Perspective.Custom.all);

      /** @type {string[]} */
      const perspectiveNames = perspectives.map((perspective) => {
        return perspective.name;
      });

      /** @type {number[]} */
      const itemIndexes = new Array();
      perspectiveNames.forEach((name, index) => {
        itemIndexes.push(index);
      });

      /** @type {Form.Field.Option} */
      const perspectiveMenu = new Form.Field.Option("perspective", "Perspective", itemIndexes, perspectiveNames, 0);
      perspectiveMenu.allowsNull = false;

      /** @type {Form} */
      const inputForm = new Form();
      inputForm.addField(perspectiveMenu);

      /** @type {string} */
      const formPrompt = "Custom perspective to export:";
      /** @type {string} */
      const buttonTitle = "Continue";

      /** @type {PerspectiveExporter.FormObject} */
      const formObject = await inputForm.show(formPrompt, buttonTitle);

      /** @type {Perspective.Custom} */
      const chosenPerspective = perspectives[formObject.values["perspective"]];
      /** @type {FileWrapper} */
      const wrapper = chosenPerspective.fileWrapper();
      /** @type {FileSaver} */
      const filesaver = new FileSaver();
      /** @type {URL | null} */
      const savedFileURL = await filesaver.show(wrapper);
    } catch (err) {
      if (!err.causedByUserCancelling) {
        new Alert(err.name, err.message).show();
      }
    }
  });

  /**
   * Validates the action can be performed
   * @param {Selection} _selection - The current selection
   * @param {any} _sender - The sender of the action
   * @returns {boolean} - Whether the action can be performed
   */
  action.validate = function (_selection, _sender) {
    return Perspective.Custom.all.length > 0;
  };

  return action;
})();

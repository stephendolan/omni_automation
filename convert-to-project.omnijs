/*{
    "author": "Stephen Dolan",
    "targets": ["omnifocus"],
    "type": "action",
    "identifier": "com.stephendolan.convert-to-project",
    "version": "1.1",
    "description": "Convert inbox tasks into projects more intelligently.",
    "label": "Project Converter",
    "mediumLabel": "Project Converter",
    "longLabel": "Project Converter",
    "paletteLabel": "Project Converter",
    "image": "arrow.uturn.up"
}*/
(() => {
  const action = new PlugIn.Action(async function (selection) {
    const selectedTask = selection.tasks[0];
    const hasChildren = selectedTask.children.length > 0;

    const form = new Form();
    form.title = "Create Project";
    form.addField(
      new Form.Field.String("projectTitle", "Project Title", selectedTask.name)
    );

    // Retrieve and format top-level and second-level folders, excluding dropped folders
    const topLevelFolders = flattenedFolders.filter(
      (folder) => !folder.parent && folder.status !== Folder.Status.Dropped
    );
    let folderNames = [];

    topLevelFolders.forEach((folder) => {
      folderNames.push(folder.name);
      folder.folders
        .filter((subFolder) => subFolder.status !== Folder.Status.Dropped)
        .forEach((subFolder) => {
          folderNames.push(folder.name + " : " + subFolder.name);
        });
    });

    const defaultFolderStart = "Tuple : Ops";
    const prioritizedFolder = "Tuple";
    folderNames.sort((a, b) => {
      if (
        a.startsWith(defaultFolderStart) &&
        !b.startsWith(defaultFolderStart)
      ) {
        return -1;
      } else if (
        !a.startsWith(defaultFolderStart) &&
        b.startsWith(defaultFolderStart)
      ) {
        return 1;
      } else if (
        a.startsWith(prioritizedFolder) &&
        !b.startsWith(prioritizedFolder)
      ) {
        return -1;
      } else if (
        !a.startsWith(prioritizedFolder) &&
        b.startsWith(prioritizedFolder)
      ) {
        return 1;
      } else {
        return a.localeCompare(b);
      }
    });

    form.addField(
      new Form.Field.Option(
        "folderName",
        "Folder",
        folderNames,
        null,
        folderNames[0]
      )
    );

    if (!hasChildren) {
      form.addField(
        new Form.Field.Checkbox("addToProject", "Add task to project?", true)
      );
      form.addField(
        new Form.Field.String("newTaskTitle", "Task Title", selectedTask.name)
      );
    }

    const formPrompt = "Configure your project:";
    const buttonTitle = "Continue";
    const formPromise = form.show(formPrompt, buttonTitle);

    form.validate = function (formObject) {
      const projectTitle = formObject.values["projectTitle"];
      const folder = formObject.values["folderName"];

      return Boolean(projectTitle) && Boolean(folder);
    };

    formPromise.then((formObject) => {
      const projectTitle = formObject.values["projectTitle"];
      const folderName = formObject.values["folderName"];

      // Find the folder by name
      const folderNames = folderName.split(" : ");
      const terminalFolder = folderNames[folderNames.length - 1];
      const folder = flattenedFolders.find((f) => f.name === terminalFolder);

      const project = new Project(projectTitle, folder);

      if (hasChildren) {
        moveTasks(selectedTask.children, project);
      } else {
        const addToProject = formObject.values["addToProject"];
        const newTaskTitle = formObject.values["newTaskTitle"];

        if (addToProject) {
          const newTask = new Task(newTaskTitle || selectedTask.name, project);
          newTask.note = selectedTask.note;
          newTask.dueDate = selectedTask.dueDate;
          newTask.deferDate = selectedTask.deferDate;
        }
      }

      // Copy properties from the original task to the project
      project.note = selectedTask.note;
      project.dueDate = selectedTask.dueDate;
      project.deferDate = selectedTask.deferDate;

      selectedTask.drop(true);

      // Scroll to and select the created project.
      URL.fromString("omnifocus:///task/" + project.id.primaryKey).open();
    });

    formPromise.catch((err) => {
      console.error(err);
    });
  });

  action.validate = function (selection, _sender) {
    return selection.tasks.length === 1;
  };

  return action;
})();
